import streamlit as st
import easyocr
import pytesseract
from PIL import Image
import cv2
import numpy as np

class AdvancedMathOCR:
    def __init__(self):
        self.setup_app()
    
    def setup_app(self):
        st.set_page_config(
            page_title="üßÆ MathSolver OCR",
            page_icon="üßÆ",
            layout="wide"
        )
    
    def preprocess_image(self, image):
        """Ti·ªÅn x·ª≠ l√Ω ·∫£nh ƒë·ªÉ tƒÉng ch·∫•t l∆∞·ª£ng OCR"""
        # Chuy·ªÉn sang ·∫£nh x√°m
        gray = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2GRAY)
        
        # L√†m s√°ng ·∫£nh
        denoised = cv2.fastNlMeansDenoising(gray, None, 10, 7, 21)
        
        # Nh·ªã ph√¢n h√≥a
        _, binary = cv2.threshold(denoised, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
        
        return Image.fromarray(binary)
    
    def extract_text(self, image):
        """Tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ ·∫£nh"""
        # EasyOCR
        reader = easyocr.Reader(['en'])
        easyocr_results = reader.readtext(np.array(image))
        
        # Tesseract OCR
        tesseract_text = pytesseract.image_to_string(image)
        
        return {
            'easyocr_raw': [text for _, text, _ in easyocr_results],
            'tesseract_text': tesseract_text
        }
    
    def render_sidebar(self):
        """Thanh ƒëi·ªÅu h∆∞·ªõng"""
        st.sidebar.title("üßÆ MathSolver")
        st.sidebar.markdown("### C√¥ng C·ª• Tr√≠ch Xu·∫•t To√°n H·ªçc")
        
        st.sidebar.header("H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng")
        st.sidebar.info("""
        1. T·∫£i ·∫£nh ch·ª©a c√¥ng th·ª©c to√°n h·ªçc
        2. H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông x·ª≠ l√Ω
        3. K·∫øt qu·∫£ hi·ªÉn th·ªã b√™n d∆∞·ªõi
        """)
    
    def main_interface(self):
        """Giao di·ªán ch√≠nh"""
        st.title("üßÆ Tr√≠ch Xu·∫•t C√¥ng Th·ª©c To√°n H·ªçc")
        
        # Upload file
        uploaded_file = st.file_uploader(
            "Ch·ªçn h√¨nh ·∫£nh", 
            type=['png', 'jpg', 'jpeg'],
            help="T·∫£i ·∫£nh ch·ª©a c√¥ng th·ª©c to√°n h·ªçc"
        )
        
        if uploaded_file is not None:
            # ƒê·ªçc ·∫£nh
            original_image = Image.open(uploaded_file)
            
            # Hi·ªÉn th·ªã ·∫£nh g·ªëc
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("·∫¢nh G·ªëc")
                st.image(original_image, use_column_width=True)
            
            # Ti·ªÅn x·ª≠ l√Ω ·∫£nh
            processed_image = self.preprocess_image(original_image)
            
            with col2:
                st.subheader("·∫¢nh X·ª≠ L√Ω")
                st.image(processed_image, use_column_width=True)
            
            # Tr√≠ch xu·∫•t vƒÉn b·∫£n
            extraction_results = self.extract_text(processed_image)
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            st.header("üîç K·∫øt Qu·∫£ Tr√≠ch Xu·∫•t")
            
            # Tab k·∫øt qu·∫£
            tab1, tab2 = st.tabs(["EasyOCR", "Tesseract"])
            
            with tab1:
                st.subheader("K·∫øt Qu·∫£ EasyOCR")
                for i, text in enumerate(extraction_results['easyocr_raw'], 1):
                    st.text(f"{i}. {text}")
            
            with tab2:
                st.subheader("K·∫øt Qu·∫£ Tesseract")
                st.code(extraction_results['tesseract_text'])
            
            # N√∫t t·∫£i xu·ªëng
            st.download_button(
                label="T·∫£i K·∫øt Qu·∫£",
                data="\n".join(extraction_results['easyocr_raw'] + 
                               [extraction_results['tesseract_text']]),
                file_name="math_ocr_results.txt",
                mime="text/plain"
            )
    
    def run(self):
        """Ch·∫°y ·ª©ng d·ª•ng"""
        self.render_sidebar()
        self.main_interface()

# Kh·ªüi ch·∫°y ·ª©ng d·ª•ng
def main():
    app = AdvancedMathOCR()
    app.run()

if __name__ == "__main__":
    main()

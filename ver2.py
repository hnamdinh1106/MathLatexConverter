import streamlit as st
import cv2
import pytesseract
import numpy as np
from PIL import Image

class MathImageSolver:
    def __init__(self):
        # Kh·ªüi t·∫°o c√°c processor
        self.ocr_processor = self._setup_ocr()
        self.image_processor = ImageProcessor()
        
    def _setup_ocr(self):
        # C·∫•u h√¨nh Tesseract OCR
        pytesseract.pytesseract.tesseract_cmd = r'/usr/bin/tesseract'
        return pytesseract

    def process_math_image(self, uploaded_file):
        # ƒê·ªçc ·∫£nh t·ª´ file upload
        image = Image.open(uploaded_file)
        image_np = np.array(image)
        
        # B∆∞·ªõc 1: Tr√≠ch xu·∫•t vƒÉn b·∫£n
        text = self._extract_text(image_np)
        
        # B∆∞·ªõc 2: Ph√¢n t√≠ch lo·∫°i b√†i to√°n
        problem_type = self._classify_problem_type(text)
        
        # B∆∞·ªõc 3: X·ª≠ l√Ω gi·∫£i b√†i to√°n
        solution = self._solve_problem(text, problem_type)
        
        return {
            'original_text': text,
            'problem_type': problem_type,
            'solution': solution
        }

    def _extract_text(self, image_np):
        # OCR ƒë·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n
        text = pytesseract.image_to_string(image_np, lang='vie')
        return text

    def _classify_problem_type(self, text):
        # Logic ph√¢n lo·∫°i b√†i to√°n
        keywords = {
            'geometry': ['tam gi√°c', 'h√¨nh', 'di·ªán t√≠ch'],
            'word_problem': ['t√¨m', 'b√†i to√°n', 'x√°c ƒë·ªãnh']
        }
        
        for problem_type, type_keywords in keywords.items():
            if any(keyword in text.lower() for keyword in type_keywords):
                return problem_type
        
        return 'unknown'

    def _solve_problem(self, text, problem_type):
        # Logic gi·∫£i b√†i to√°n theo t·ª´ng lo·∫°i
        if problem_type == 'geometry':
            return self._solve_geometry_problem(text)
        elif problem_type == 'word_problem':
            return self._solve_word_problem(text)
        
        return "Kh√¥ng th·ªÉ gi·∫£i b√†i to√°n"

    def _solve_geometry_problem(self, text):
        # X·ª≠ l√Ω b√†i to√°n h√¨nh h·ªçc
        return {
            'method': 'Gi·∫£i b√†i to√°n h√¨nh h·ªçc',
            'steps': ['B∆∞·ªõc 1', 'B∆∞·ªõc 2'],
            'result': 'K·∫øt qu·∫£ b√†i to√°n'
        }

    def _solve_word_problem(self, text):
        # X·ª≠ l√Ω b√†i to√°n l·ªùi vƒÉn
        return {
            'method': 'Gi·∫£i b√†i to√°n l·ªùi vƒÉn',
            'steps': ['B∆∞·ªõc 1', 'B∆∞·ªõc 2'],
            'result': 'K·∫øt qu·∫£ b√†i to√°n'
        }

def main():
    st.title("üßÆ Gi·∫£i B√†i To√°n T·ª´ ·∫¢nh")
    
    # Sidebar cho t√πy ch·ªçn
    st.sidebar.header("C√†i ƒê·∫∑t")
    
    # Upload ·∫£nh 
    uploaded_file = st.file_uploader(
        "T·∫£i ·∫¢nh B√†i To√°n", 
        type=['png', 'jpg', 'jpeg']
    )
    
    # X·ª≠ l√Ω ·∫£nh n·∫øu ƒë∆∞·ª£c t·∫£i
    if uploaded_file is not None:
        # Hi·ªÉn th·ªã ·∫£nh
        st.image(uploaded_file, caption="·∫¢nh B√†i To√°n")
        
        # X·ª≠ l√Ω to√°n h·ªçc
        solver = MathImageSolver()
        result = solver.process_math_image(uploaded_file)
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        st.subheader("üìÑ Chi Ti·∫øt B√†i To√°n")
        st.json(result)
        
        # C√°c tab k·∫øt qu·∫£
        tab1, tab2, tab3 = st.tabs([
            "VƒÉn B·∫£n G·ªëc", 
            "Ph√¢n Lo·∫°i", 
            "Gi·∫£i B√†i To√°n"
        ])
        
        with tab1:
            st.text(result['original_text'])
        
        with tab2:
            st.write(f"Lo·∫°i B√†i To√°n: {result['problem_type']}")
        
        with tab3:
            st.json(result['solution'])

if __name__ == "__main__":
    main()
